@typeparam TItem // Es un tipo genérico, lo que vuelve más flexible nuestro componente
@using System.Reflection @* para poder inspeccionar las propiedades de los objetos en tiempo de ejecución. *@

@if (memberInfo != null && memberInfo.Length > 0)
{
    <table class="@($"{this.CSSClass}")">
        <thead>
            <tr>
                @foreach(var member in memberInfo)
                {
                    @if (member.MemberType == MemberTypes.Property &&
                       !ColumnsToExcludeCSV.Contains(member.Name, StringComparison.OrdinalIgnoreCase))
                    {
                        <th>
                            @member.Name @* Obtengo el Name de la propiedad *@
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in this.Items)
            {
                <tr>
                    @foreach (var member in memberInfo)
                    {
                        @if (member.MemberType == MemberTypes.Property &&
                      !ColumnsToExcludeCSV.Contains(member.Name, StringComparison.OrdinalIgnoreCase))
                        {
                            <td>
                                @item.GetType().GetProperty(member.Name).GetValue(item)
                            </td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    MemberInfo[] memberInfo;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Items != null && Items.Count > 0)
        {
            Type typeofItem = this.Items[0].GetType();
            memberInfo = typeofItem.GetMembers();
        }
    }

    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public string ?ColumnsToExcludeCSV { get; set; }

    [Parameter]
    public string ?CSSClass { get; set; }
}