@page "/employees"
@inject IEmployeeService EmployeeServi
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@using BlazorLinq.Components.Atoms
@using BlazorLinq.Components.Molecules
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Empleados</PageTitle>

<p>Instancia Servicio @EmployeeServi.Uid</p>

 @if (employeersList == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container my-5">
        <h1 class="mb-3">Empleados</h1>
        <PrimaryButton Text="Agregar un empleado" OnClick="NavigateToNewEmployeeForm" />
        <div class="input-group mt-4">
            <input type="text" class="form-control" placeholder="Buscar..." @bind="SearchInputText" />
            <button class="btn btn-primary" type="button" @onclick="BuscarEmpleado">
                Buscar empleado
            </button>
        </div>
    </div>
    <div class="container mb-5">
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Edad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in employeersList)
                {
                    <tr>
                        <td>@forecast.FullName</td>
                        <td>@forecast.Age</td>
                        <td>
                            <a href="/employee-form/@forecast.Id" class="btn btn-primary">Editar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="container d-flex justify-content-center flex-wrap">
            <PrimaryButton Text="Mostrar sólo mayores de edad" OnClick="FiltrarMayoresDeEdad" />
            <PrimaryButton Text="Borrar Empleado" OnClick="RemoveEmployee" />
        </div>
    </div>

}

@code {
    private List<Cliente> clientes;
    private List<Employee>? employeersList;
    private string SearchInputText { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("Api");
        clientes = await client.GetFromJsonAsync<List<Cliente>>("api/clientes");
        Console.WriteLine(clientes);
        // Simulate asynchronous loading to demonstrate streaming rendering
        // await Task.Delay(500);        // usersList = (from user in users
        //                        where user.Age > 18
        //                        select user).ToList();
        employeersList = EmployeeServi.GetAllEmployees();
    }

    private void FiltrarMayoresDeEdad()
    {
        employeersList = (from user in employeersList
                     where user.Age > 18
                     select user).ToList();
    }

    private void BuscarEmpleado()
    {
        employeersList = employeersList?.Where(u => u.FullName.ToLower().Contains(SearchInputText.ToLower())).ToList();
    }

    private void RemoveEmployee()
    {
        EmployeeServi.RemoveEmployee(5);
    }

    private void NavigateToNewEmployeeForm()
    {
        NavigationManager.NavigateTo("/employee-form");
    }
}
