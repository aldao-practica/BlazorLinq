@page "/users"
@using BlazorLinq.Components.Molecules
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Empleados</PageTitle>

<h1>Empleados</h1>

@if (usersList == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container my-5">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar..." @bind="SearchInputText" />
            <button class="btn btn-primary" type="button" @onclick="BuscarEmpleado">
                Buscar empleado
            </button>
        </div>
    </div>
    <div class="container">
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Edad</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in usersList)
                {
                    <tr>
                        <td>@forecast.FirstName</td>
                        <td>@forecast.LastName</td>
                        <td>@forecast.Age</td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="FiltrarMayoresDeEdad">Mostrar sólo mayores de edad</button>
    </div>

}

@code {
    List<User> users = new List<User>
    {
        new User(1, "John", "Doe", "john.doe@example.com", 25),
        new User(2, "Jane", "Smith", "jane.smith@example.com", 17),
        new User(3, "Alice", "Johnson", "alice.johnson@example.com", 30),
        new User(4, "Bob", "Brown", "bob.brown@example.com", 20),
        new User(5, "Emily", "Davis", "emily.davis@example.com", 16)
    };
    private List<User>? usersList;
    private string SearchInputText { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        // await Task.Delay(500);
        // usersList = (from user in users
        //                        where user.Age > 18
        //                        select user).ToList();
        usersList = users.ToList();
    }

    private class User
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public int Age { get; set; }

        public User(int id, string firstName, string lastName, string email, int age)
        {
            Id = id;
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            Age = age;
        }

        public override string ToString()
        {
            return $"Id: {Id}, Name: {FirstName} {LastName}, Email: {Email}, Age: {Age}";
        }
    }

    private void FiltrarMayoresDeEdad()
    {
        usersList = (from user in users
                     where user.Age > 18
                     select user).ToList();
    }

    private void BuscarEmpleado()
    {
        usersList = users.Where(u => u.FirstName.ToLower().Contains(SearchInputText.ToLower())
        || u.LastName.ToLower().Contains(SearchInputText.ToLower())).ToList();
    }
}
