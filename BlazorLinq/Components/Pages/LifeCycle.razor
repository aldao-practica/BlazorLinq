@page "/life-cycle"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1 class="mb-5">Razor lifecycle</h1>

<button class="btn btn-primary me-2" @onclick="() => CambiarValor(1)">Valor 1</button>

<OnParametersSetComponet param="@valor" />

@code {
	[Parameter]
	public int param { get; set; }

	private int valor = 1;

	protected override void OnInitialized()
	{
		Console.WriteLine("OnInitialized es llamado cuando el componente es inicializado.");
		base.OnInitialized();
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("OnInitializedAsync es llamado cuando el componente es inicializado.");
		await base.OnInitializedAsync();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender) // Verifica si es la primera renderización
		{
			Console.WriteLine($"OnAfterRender se ejecuta después de que el componente se ha renderizado en la interfaz de usuario. valor: {param}");
		}
		base.OnAfterRender(firstRender);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender) // Verifica si es la primera renderización
		{
			await Task.Delay(500);
			Console.WriteLine("OnAfterRenderAsync se ejecuta después de que el componente se ha renderizado en la interfaz de usuario.");
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	public void Dispose()
	{
		Console.WriteLine("El componente se desmontó y los recursos se liberaron");
		// Aquí puedes liberar eventos, recursos, etc.
	}

	void CambiarValor(int nuevo)
	{
		valor = valor + nuevo;
	}
}